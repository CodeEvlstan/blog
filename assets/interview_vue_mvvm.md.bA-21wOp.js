import{_ as l,c as o,o as i,ae as a}from"./chunks/framework.CLNW5JS9.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/mvvm.md","filePath":"interview/vue/mvvm.md"}'),t={name:"interview/vue/mvvm.md"};function m(r,e,v,d,n,s){return i(),o("div",null,e[0]||(e[0]=[a('<h3 id="mvc和mvvm的定义" tabindex="-1">MVC和MVVM的定义 <a class="header-anchor" href="#mvc和mvvm的定义" aria-label="Permalink to &quot;MVC和MVVM的定义&quot;">​</a></h3><h4 id="mvc-model-view-model" tabindex="-1"><strong>mvc</strong> (model view Model) <a class="header-anchor" href="#mvc-model-view-model" aria-label="Permalink to &quot;**mvc** (model view Model)&quot;">​</a></h4><p><strong>1. ​MVC的三层结构</strong></p><ul><li>Model（模型）​​：管理数据逻辑（如数据库操作、网络请求）；</li><li>View（视图）​​：负责UI展示（如HTML页面）；</li><li>Controller（控制器）​​：协调Model与View，处理用户输入并更新数据。 典型场景：传统Web应用中，用户点击按钮触发Controller调用Model更新数据，再手动操作DOM更新View</li></ul><h4 id="mvvm-model-view-viewmodel" tabindex="-1"><strong>mvvm</strong> (model view viewModel) <a class="header-anchor" href="#mvvm-model-view-viewmodel" aria-label="Permalink to &quot;**mvvm** (model view viewModel)&quot;">​</a></h4><p><strong>​1. MVVM的三层结构</strong></p><ul><li>Model​：功能与MVC相同；</li><li>View​：通过数据绑定自动同步ViewModel状态；</li><li>​ViewModel​：核心桥梁，将Model数据转换为View可用的形式，并通过双向绑定实现自动更新。</li><li>Vue实现：Vue实例作为ViewModel，通过data属性管理状态，v-model等指令实现数据与DOM的双向绑定</li></ul>',7)]))}const w=l(t,[["render",m]]);export{M as __pageData,w as default};
