import{_ as a,c as s,o as t,ae as e}from"./chunks/framework.CLNW5JS9.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/javascript/built-in-function.md","filePath":"interview/javascript/built-in-function.md"}'),l={name:"interview/javascript/built-in-function.md"};function n(p,i,h,r,o,k){return t(),s("div",null,i[0]||(i[0]=[e(`<p>在JavaScript中，内置函数主要包括：</p><ol><li>String()</li><li>Number()</li><li>Boolean()</li><li>Array()</li><li>Object()</li><li>Function()</li><li>RegExp()</li><li>Date()</li><li>Error()</li><li>Symbol()</li><li>BigInt()</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过这种形式创建的是字符串&#39;abc&#39;的封装对象，而非基本类型值&#39;abc&#39;</span></span></code></pre></div><h2 id="object-prototype-tostring-与内部属性-class" tabindex="-1">Object.Prototype.toString()与内部属性[[Class]] <a class="header-anchor" href="#object-prototype-tostring-与内部属性-class" aria-label="Permalink to &quot;Object.Prototype.toString()与内部属性[[Class]]&quot;">​</a></h2><p>通过调用这个方法我们可以得到类似&#39;[object Array]&#39;的形式，来确定一个变量为数组类型</p><h2 id="内置函数的使用" tabindex="-1">内置函数的使用 <a class="header-anchor" href="#内置函数的使用" aria-label="Permalink to &quot;内置函数的使用&quot;">​</a></h2><h3 id="使用" tabindex="-1">使用： <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用：&quot;">​</a></h3><p>一般不推荐使用内置函数去声明变量，他们有的时候会造成意想不到的效果。而且通过内置函数去声明变量会造成性能上的损失。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">在 JavaScript 中，通过 new Boolean() 构造函数创建的布尔对象是一个对象，而不是原始的布尔值。虽然它代表着布尔值的 true 或 false，但是这个对象本身在布尔上下文中是 &quot;truthy&quot;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样声明的值也是truthy</span></span></code></pre></div><h3 id="valueof" tabindex="-1">valueof <a class="header-anchor" href="#valueof" aria-label="Permalink to &quot;valueof&quot;">​</a></h3><p>通过valueof()函数可以得到封装对象中的基本类型的值</p><h2 id="箭头函数的实现" tabindex="-1">箭头函数的实现 <a class="header-anchor" href="#箭头函数的实现" aria-label="Permalink to &quot;箭头函数的实现&quot;">​</a></h2><p>在ES6新增的箭头函数中，</p>`,13)]))}const u=a(l,[["render",n]]);export{d as __pageData,u as default};
